- name: Get local docker node information
  docker_host_info:
    debug: no
  register: docker_data

- name: Export docker swarm id of nodes to be assigned labels
  set_fact:
    swarm_node_id: "{{ docker_data['Swarm']['NodeID'] }}"

- name: Ensure all TGS nodes have correct labels
  docker_node:
    hostname: "{{ hostvars[item]['swarm_node_id'] }}"
    labels:
      tgs_role: 'node'
  with_items: "{{ groups['tgs_swarm'] }}"

- name: Ensure TGS directory exists
  file:
    path: '{{ tgs_dir }}'
    state: directory
    mode: '0740'

- name: Construct list of ports for game servers on this server
  set_fact:
    _tgs_game_ports_processed: '{{ _tgs_game_ports_processed }} + [ "0.0.0.0:{{ item }}:{{ item }}" ]'
  loop: "{{ tgs_game_ports }}"

- name: Get swarm controller IP for use in configuration
  set_fact:
    tgs_swarm_controller: "{{ hostvars[item]['ansible_default_ipv4'].address }}"
  with_items: "{{ groups['tgs_swarm_controller'] }}"  

- name: Generate TGS configuration for the controller
  template:
    src: 'appsettings.Production.yml.j2'
    dest: '{{ tgs_dir }}/appsettings.Production.yml'
    mode: '0640'

- name: Create TGS config file directory
  file:
    path: '{{ tgs_config_dir }}'
    state: directory
    mode: '0740'

- name: Create TGS instances directory
  file:
    path: '{{ tgs_instances_dir }}'
    state: directory
    mode: '0740'

- name: Create TGS logs directory
  file:
    path: '{{ tgs_logs_dir }}'
    state: directory
    mode: '0740'

# note to self this isn't specifically targeting the 'right' container
- name: Create Postgres database storage directory
  file:
    path: '{{ postgres_data_directory }}'
    state: directory
    mode: '0740'

- name: Deploy tgs stack
  include_role:
    name: 'docker_stack_create'
  vars:
    stack_name: '{{ tgs_stack_name }}'
    compose:
      version: "3.2"
      networks:
        tgs_net:
          name: 'tgs_net'
          driver: 'overlay'
      services:
        postgres:
          image: "{{ postgres_container_image }}"
          networks:
            - tgs_net
          deploy:
            placement:
              constraints: [ node.role == manager ]
          volumes:
            - '{{ postgres_data_directory }}:/var/lib/postgresql/data'
          ports:
            - '{{ postgres_external_port }}:5432'
          environment:
            POSTGRES_DB: '{{ postgres_db }}'
            POSTGRES_USER: '{{ postgres_user }}'
            POSTGRES_PASSWORD: '{{ postgres_password }}'
        tgs:
          image: '{{ tgs_container_image }}'
          networks:
            - tgs_net
          deploy:
            mode: global
            placement:
              constraints: [ tgs_role == node ]
          ports: '{{ [ tgs_external_port ~ ":5000" ] + _tgs_game_ports_processed }}'
          volumes:
            - '{{ tgs_dir }}/appsettings.Production.yml:/config_data/appsettings.Production.yml'
            - '{{ tgs_config_dir }}:/config_data'
            - '{{ tgs_instances_dir }}:/tgs4_instances'
            - '{{ tgs_logs_dir }}:/tgs_logs'
          capabilities:
            - 'sys_nice'